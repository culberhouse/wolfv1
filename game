import random
from collections import deque, defaultdict

class WolfGame:
    def __init__(self, players):
        self.players = players
        self.num_players = len(players)
        self.rotation = self.generate_wolf_rotation()
        self.scores = defaultdict(int)
        self.hole_results = []
        self.current_hole = 1
        self.carry_over_points = 0

    def generate_wolf_rotation(self):
        shuffled = self.players[:]
        random.shuffle(shuffled)
        rotation = deque(shuffled)
        order = []
        for _ in range(len(shuffled)):
            order.append(rotation[0])
            rotation.rotate(-1)
        return order

    def get_wolf_for_hole(self, hole):
        index = (hole - 1) % self.num_players
        return self.rotation[index]

    def record_hole(self, wolf, team, win_type, is_tie):
        if is_tie:
            self.carry_over_points += 1
            self.hole_results.append({
                'hole': self.current_hole,
                'wolf': wolf,
                'result': 'Tie (No Blood)',
                'points_awarded': 0,
                'carry_over': self.carry_over_points
            })
            return

        multiplier = 1
        if win_type == "solo_pre":
            multiplier = 3
        elif win_type == "solo_post":
            multiplier = 2

        total_points = (self.carry_over_points + 1) * multiplier
        for player in team:
            self.scores[player] += total_points

        self.hole_results.append({
            'hole': self.current_hole,
            'wolf': wolf,
            'result': f"{' + '.join(team)} won ({win_type})",
            'points_awarded': total_points,
            'carry_over': self.carry_over_points
        })

        self.carry_over_points = 0

    def advance_hole(self):
        self.current_hole += 1

    def get_scores(self):
        return dict(self.scores)

    def get_hole_summary(self):
        return self.hole_results


def run_wolf_console_game():
    print("Welcome to the Wolf Golf Game Tracker!")

    while True:
        try:
            num_players = int(input("Enter number of players (3 or 4): "))
            if num_players in [3, 4]:
                break
            else:
                print("Only 3 or 4 players allowed.")
        except ValueError:
            print("Please enter a valid number.")

    players = []
    for i in range(num_players):
        name = input(f"Enter name for player {i + 1}: ").strip()
        players.append(name)

    game = WolfGame(players)
    print(f"\nWolf Rotation Order: {game.rotation}\n")

    while True:
        hole = game.current_hole
        wolf = game.get_wolf_for_hole(hole)
        print(f"\n--- Hole {hole} ---")
        print(f"Wolf: {wolf}")

        # Ask for solo option
        solo_type = None
        while True:
            solo_input = input("Did the Wolf go solo? (none / pre / post): ").strip().lower()
            if solo_input in ['none', 'pre', 'post']:
                if solo_input == 'pre':
                    solo_type = 'solo_pre'
                elif solo_input == 'post':
                    solo_type = 'solo_post'
                break
            else:
                print("Enter 'none', 'pre', or 'post'.")

        # Determine team
        if solo_type:
            team = [wolf]
        else:
            partner = input(f"Who did {wolf} partner with? (Leave blank if no partner): ").strip()
            if partner and partner in players and partner != wolf:
                team = [wolf, partner]
            else:
                opponents = [p for p in players if p != wolf]
                team = opponents

        # Ask who won
        winner_input = input("Who won the hole? (team / opponents / tie): ").strip().lower()
        if winner_input == "tie":
            game.record_hole(wolf, team=[], win_type="team", is_tie=True)
        elif winner_input == "team":
            game.record_hole(wolf, team=team, win_type=solo_type or "team", is_tie=False)
        else:
            opponents = [p for p in players if p not in team]
            game.record_hole(wolf, team=opponents, win_type="team", is_tie=False)

        print("\nCurrent Scores:")
        scores = game.get_scores()
        for player, score in scores.items():
            print(f"{player}: {score}")

        game.advance_hole()
        cont = input("Continue to next hole? (y/n): ").strip().lower()
        if cont != 'y':
            break

    print("\n--- Final Scoreboard ---")
    final_scores = game.get_scores()
    for player, score in final_scores.items():
        print(f"{player}: {score}")

    print("\n--- Hole Summary ---")
    for summary in game.get_hole_summary():
        print(f"Hole {summary['hole']}: {summary['result']} â€” Points: {summary['points_awarded']}")


if __name__ == "__main__":
    run_wolf_console_game()
